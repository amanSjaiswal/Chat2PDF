
const puppeteer = require('puppeteer');
const path = require('path');
const readline = require('readline');

/**
 * Wait for Enter key press or timeout after 2 minutes
 */
function waitForEnterOrTimeout(timeoutMs = 120000) {
  return new Promise(resolve => {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });

    const timer = setTimeout(() => {
      console.log(`⏳ Timeout (${timeoutMs / 1000}s) reached. Proceeding with PDF generation...`);
      rl.close();
      resolve();
    }, timeoutMs);

    rl.question('✅ Press [Enter] to start PDF export after verifying the full chat is loaded...\n', () => {
      clearTimeout(timer);
      rl.close();
      resolve();
    });
  });
}

/**
 * Launch browser, load chat page, wait for user to confirm, generate full-page PDF
 */
async function generatePDFfromLink(link, mode = 'full', index = 0) {
  const browser = await puppeteer.launch({
    headless: false, // Show browser window for debugging
    slowMo: 50,
    args: ['--start-maximized'],
    defaultViewport: null
  });

  const page = await browser.newPage();
  console.log(`🌐 Opening ChatGPT share link: ${link}`);
  await page.goto(link, { waitUntil: 'networkidle0', timeout: 60000 });

  // Optional: highlight chat container for user clarity
  await page.evaluate(() => {
    const chat = document.querySelector('main');
    if (chat) {
      chat.style.border = '2px dashed red';
      chat.scrollIntoView();
    }
  });

  await page.evaluate(() => {
  const chat = document.querySelector('main');
  if (chat) {
    chat.style.height = 'auto';
    chat.style.maxHeight = 'none';
    chat.style.overflow = 'visible';
  }
  window.scrollTo(0, 0);
  });
  console.log('👀 Review the chat. Scroll to the top if needed.');
  await waitForEnterOrTimeout(); // User confirms it's fully loaded

  const pdfPath = path.resolve(__dirname, `../downloads/chat_${index}.pdf`);
  await page.pdf({
    path: pdfPath,
    format: 'A4',
    printBackground: true,
    margin: { top: '0px', bottom: '0px', left: '0px', right: '0px' }
  });

  await browser.close();
  console.log(`✅ PDF saved to: ${pdfPath}`);
  return pdfPath;
}

module.exports = { generatePDFfromLink };

